STIMULATED USING EDA PLAYGROUND

DESIGN.SV


// Code your design here
module Scoreboard (clk, rst, inc, dec,seg7disp0,seg7disp1);
input clk;
input rst;
input inc;
input dec;
output[6:0] seg7disp1;
output[6:0] seg7disp0;
reg[0:0] State; //Only 2 states; So 1 bit sufficient
reg[3:0] BCD1;
reg[3:0] BCD0;
reg[2:0] rstcnt;
reg[6:0] seg7Rom[0:9];
initial
 begin 
 BCD1 = 4'b0000;
 BCD0 = 4'b0000;
 rstcnt = 0;
 State = 0;
 seg7Rom[0] = 7'b0111111;
 seg7Rom[1] = 7'b0000110;
 seg7Rom[2] = 7'b1011011;
 seg7Rom[3] = 7'b1001111;
 seg7Rom[4] = 7'b1100110;
 seg7Rom[5] = 7'b1101101;
 seg7Rom[6] = 7'b1111100;
 seg7Rom[7] = 7'b0000111;
 seg7Rom[8] = 7'b1111111;
 seg7Rom[9] = 7'b1100111;
 end
  
  always @(posedge clk or negedge clk)
begin
     case (State)
     0 :
         begin
            BCD1 <=4'b0000 ;
            BCD0 <= 4'b0000 ;
            rstcnt <= 0 ;
            State <= 1 ;
         end
     1 :
         begin
            if (rst == 1'b1)
            begin
               if (rstcnt == 4)
               begin
                  State <= 0 ;
               end
               else
               begin
                   rstcnt <= rstcnt + 1 ;
               end
             end
             else if (inc == 1'b1 && dec == 1'b0)
             begin
rstcnt <= 0 ;
if (BCD0 < 4'b1001)
begin
BCD0 <= BCD0 + 1 ;
end
else if (BCD1 < 4'b1001)
begin
BCD1 <= BCD1 + 1 ;
BCD0 <= 4'b0000 ;
end
end
else if (dec == 1'b1 && inc == 1'b0)
begin
rstcnt <= 0 ;
if (BCD0 > 4'b0000)
begin
BCD0 <= BCD0 - 1 ;
end
else if (BCD1 > 4'b0000)
begin
BCD1 <= BCD1 - 1 ;
BCD0 <= 4'b1001 ;
end
end
else if (inc == 1'b1 && dec == 1'b1)
begin
rstcnt <= 0 ;
end
         end
     endcase
end
   
  
assign seg7disp0 = seg7Rom[BCD0];
assign seg7disp1 = seg7Rom[BCD1];
  
endmodule






TESTBENCH.SV



// Code your testbench here
// or browse Examples
module Scoreboard_tb;
  reg CLK,RST,INC,DEC;
  wire[6:0] seg7disp1;
  wire[6:0] seg7disp0;
  wire[3:0] BCD1;
  wire[3:0] BCD0;
Scoreboard Scoreboard_tb(.clk(CLK),.rst(RST),.inc(INC),.dec(DEC));
initial CLK=1'b0;
always#50 CLK=~CLK;
initial INC=1'b0;
always#50 INC=~INC;
initial DEC=1'b1;
always#25 DEC=~DEC;

  
initial begin
  $dumpfile("dump.vcd");
  $dumpvars(0);
  begin
RST=0;
INC=0;
DEC=0;
#50 
    $monitor("CLK%b,RST%b,INC%b,DEC%b,",CLK,RST,INC,DEC);
 
RST=0;
INC=1;
DEC=1;
#100 
    $monitor("CLK%b,RST%b,INC%b,DEC%b,",CLK,RST,INC,DEC);
RST=0;
INC=0;
DEC=1;
#50 
   $monitor("CLK%b,RST%b,INC%b,DEC%b,",CLK,RST,INC,DEC);
RST=0;
INC=1;
DEC=1;
#500
   $monitor("CLK%b,RST%b,INC%b,DEC%b,",CLK,RST,INC,DEC);
   
#1000 $finish;
  end end
endmodule 



